<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: thoughts | ]]></title>
  <link href="http://zyearn.github.io/blog/categories/thoughts/atom.xml" rel="self"/>
  <link href="http://zyearn.github.io/"/>
  <updated>2021-04-10T14:36:35+02:00</updated>
  <id>http://zyearn.github.io/</id>
  <author>
    <name><![CDATA[Jiashun Zhu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[抽象与计算机课程]]></title>
    <link href="http://zyearn.github.io/blog/2016/03/06/cs-courses-and-abstraction/"/>
    <updated>2016-03-06T21:43:00+01:00</updated>
    <id>http://zyearn.github.io/blog/2016/03/06/cs-courses-and-abstraction</id>
    <content type="html"><![CDATA[<p>如果要问计算机领域中哪个思想对我的帮助最大，那么应该就是抽象（abstraction）了。本文主要介绍一下抽象以及它和计算机课程的关系。</p>

<p>第一次接触抽象是我大学低年级学数据结构的时候，记得很清楚当时学一个概念叫抽象数据类型（abstract data type），大概意思就是一个数据结构，接口是一回事，实现是另一回事，比如栈，作为使用者你只需要知道它有push、pop、isEmpty等方法，但它的底层实现到底是array还是linked list，你是不需要知道的。</p>

<!--more-->


<p>用通俗一点的话说，抽象就是你好好做自己的事，以及知道别人能帮你干什么事，至于别人是如何帮你完成的，你没必要知道。</p>

<p>这个简单的思想大大提高了开发者的效率，让开发者只专注于要解决的问题，而不是一些细枝末节的事。</p>

<p>孟岩在它的<a href="http://blog.csdn.net/myan/article/details/5877305">博客</a>里也提到过“关注重点”这件事，虽然没有明显地提及抽象二字，但他的意思和抽象表达的意思是一样的：</p>

<blockquote><p>我主张，在具备基础之后，学习任何新东西，都要抓住主线，突出重点。对于关键理论的学习，要集中精力，速战速决。而旁枝末节和非本质性的知识内容，完全可以留给实践去零敲碎打。</p>

<p>原因是这样的，任何一个高级的知识内容，其中都只有一小部分是有思想创新、有重大影响的，而其它很多东西都是琐碎的、非本质的。因此，集中学习时必须把握住真正重要那部分，把其它东西留给实践。对于重点知识，只有集中学习其理论，才能确保体系性、连贯性、正确性，而对于那些旁枝末节，只有边干边学能够让你了解它们的真实价值是大是小，才能让你留下更生动的印象。如果你把精力用错了地方，比如用集中大块的时间来学习那些本来只需要查查手册就可以明白的小技巧，而对于真正重要的、思想性东西放在平时零敲碎打，那么肯定是事倍功半，甚至适得其反。</p></blockquote>

<p>最近发现，计算机专业的课程完全可以用抽象来解释：每一门课想做的事就是利用下层提供的接口，实现功能，然后再给上层提供接口。这样一层一层的抽象就构成了所有的专业课。</p>

<p>举一个例子来说明这个从上往下的层级抽象是如何组织的。</p>

<p>先来看最高层，问题。刚学编程的时候，会先学一门课导论课或者编程入门课，我当时的入门课叫做“程序设计”，课程内容是介绍一些问题，然后介绍一点编程语言的知识，作业是一些编程问题，比如八皇后、素性测试之类的比较常规的编程题。这门课的目的一般都是介绍“问题”的，介绍计算机科学有哪些有挑战的问题，让学生对计算机专业有一个感性的认识，而不是对特定编程语言或者算法的学习，所以这类课程一般用python来编程。</p>

<p>再往下一层，算法和数据结构。这一层的目的是学习/实现各种算法/数据结构，提供给上层功能。比如排序，问题解决者只要知道这里应该用快速排序，而不是选择排序，而把快速排序的实现留给这一层的开发者，从而使各种优化都可以对上层透明，比如小数组变插入排序、中位数取pivot、三向快速排序等，这些优化调用者完全不必要知道，他只需要知道：哇，这个库提供的快速排序还真快。</p>

<p>再往下一层，语言层，毕竟所有算法都要由某一门语言来实现。这一层的存在使得算法的设计可以脱离具体的语言。不同语言又提供了不同的抽象，像函数式语言就比命令式语言的抽象级高，更高的抽象级意味着更加专注问题本身（不需要考虑内存布局、CPU使用等）以及更少的代码量。</p>

<p>再往下一层，编译器/解释器。我们编写代码是用高级语言，而cpu上执行的是机器码，所以这个抽象层帮我们做了这个转化。这个抽象层的好处是，高级代码的编写者完全不需要知道这个程序所运行的操作系统和硬件平台，任何有该语言编译器/解释器的机器，程序都可以跑（从而实现了跨平台）。应用层开发者可以不用知道这个由高级语言到机器码的转化具体是怎么实现的，毕竟编译器优化的编写和优化完全是一个团队的工作量，开发者关注问题的解决，编译器负责转化出高效的机器码，各干各的，这正是抽象的重点。</p>

<p>再往下一层，操作系统。OS向开发者抽象了硬件（CPU、内存、Disk、NIC等），并且以syscall的形式向用户提供服务。OS的设计是最能体现抽象的，虚拟内存和进程让程序以为自己独占着内存和CPU，同时隔离了不同进程以防恶意进程；文件系统让用户可以方便地读取存储数据，而不需要直接操作底层的硬盘；文件描述符抽象了底层的设备（pipe/file/device/socket/&hellip;）。</p>

<p>再往下一层，ISA（Instruction set architecture），俗称软件与硬件的接口。这个俗称是非常形象的。指令集架构，说得简单点就是机器码，也可以理解为一个协议。ISA标准制定者指定一套指令集（比如x86、PowerPC、SPARC），然后编译器开发者需要根据这个标准/协议来编写对应的编译器；CPU制造商需要根据这个标准/协议来制造出支持这套ISA的CPU（比如intel的CPU支持x86/x86_64）。也就是说，软件/硬件都依照这个ISA来设计，那么就可以对接了。</p>

<p>再往下一层，组成原理和体系结构。这一层要做的事情是借助数字电路给它提供的功能（组合电路和锁存器），来设计一个能实现某种ISA的CPU，让编译器生成的指令可以在此CPU上运行。大学里一般会开一门叫“计算机组成原理”的课，一开始学单周期CPU的实现（取指、译码、执行&hellip;&hellip;），为了提高效率又提出了流水线的实现。为了发掘更高的效率，之后又会学一门叫“计算机体系结构”的课，这门课的目的是为了发掘更高的并行，从而制造出更快的CPU。那这一层是如何用数字电路提供的功能？举两个典型例子：一、CPU为了做计算会有ALU模块，而ALU模块正是一个组合电路（输入确定那么输出确定）；二、在流水线寄存器中每一个时钟上升沿都会保存输入的值，在这个时钟周期内组合电路会根据这个新值计算出结果传输到下一级流水线寄存器的输入，等待下一个时钟上升沿的到来，这里的流水线寄存器正是某种锁存器的实现，而CPU开发者并不需要这个数字电路模块是怎么实现。</p>

<p>再往下一层，数字电路。这门课的目的是教学生如何利用基本的门电路（与非或门）来实现一些高级的功能（译码器、多路复用器、锁存器、时序电路&hellip;&hellip;），然后给上层提供功能。上数字电路课是一个用砖搭房子的过程，由基本的门电路开始，慢慢构造出复杂的电路。数字电路不需要关心基本的门电路是如何实现的，因为这正是模拟电路向上层提供的功能。</p>

<p>再往下一层，模拟电路。这一层实现了与或非等基本门电路。比如非门、与非门、或非门都可以通过若干个p/n型MOS晶体管构成，而与门可以通过连接一个与非门和非门构成，或门可以通过连接一个或非门和非门构成。很多同学都觉得模电对于计算机的同学不必要学，而我认为相反，它是你构建整个计算机抽象层级的基石。</p>

<p>再往下一层，就不是计算机领域研究的事了。</p>

<p>当然，还有很多专业课我并没有提及，比如网络，它是OS提供的功能，以文件描述符的形式提供给用户使用；在网络协议栈实现的细节里，又分了好几层抽象，这就是我们熟知的OSI七层网络模型（有时候被抽象为五层：Application、Transport、Network、DataLink、Physical）。各位可以自己回忆一下大学里上过哪些专业课，以及它应该放在抽象的哪一层上。</p>

<p>仔细一想会发现，几乎所有的技术书籍都尝试在解决某一层上的问题，利用下层提供的抽象，然后向上层提供功能。</p>

<p>让我们脱离计算机领域，再往高一点看，会发现整个计算机领域就是在为别的领域提供功能、并隐藏了细节：医疗、交通、餐饮、支付&hellip;&hellip;</p>

<p>抽象，让生活变得更简单了一点。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[本科毕设]]></title>
    <link href="http://zyearn.github.io/blog/2014/06/23/bachelor-thesis/"/>
    <updated>2014-06-23T18:35:00+02:00</updated>
    <id>http://zyearn.github.io/blog/2014/06/23/bachelor-thesis</id>
    <content type="html"><![CDATA[<p>上星期毕设终于答辩完了，本科的最后一件事也算完了。</p>

<p>毕设看似做了三四个月，其实真正花的时候只有一个月不到吧。我觉得对于本科生而言，毕设做什么东西其实不重要，除了那些非常非常牛的人，比如香农在1936年的硕士论文，很少有人做的毕设是有大用途的（甚至可能小用途都没有）。</p>

<!-- more -->


<p>重要的是一些科学素养培养和写学术论文中整个流程的经历。比如做一个课题前，要先详细调研背景，现有的研究成果和研究思路，然后基于现有的缺点和局限提出自己的解决方法，从理论上证明自己的方案，设计实验验证方案，和同类的方法做对比，作出比较的图表，最后做出总结、展望、指出未来工作和不足。</p>

<p>我做毕设当中收获最大的可能就是这一整个写学术论文的流程。其次是做计划非常地重要，比如调研国内外研究现状要花一个星期就花一个星期，决不能花两个星期。每个阶段都有个时间表能大大地督促自己完成论文。</p>

<p>整个毕业论文里最有意思的可能就是原型实现了。用nodejs的express写了个网站来展示整个系统，后台用C++做主要的计算，用C++主要是性能原因。最无聊的部分就是当几句话就说清楚的东西因为字数不够所以加入了很多废话才显得内容充实。</p>

<p>好了，接着就是疯狂的最后一周了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看似努力]]></title>
    <link href="http://zyearn.github.io/blog/2014/01/28/think-after-learn/"/>
    <updated>2014-01-28T16:41:00+01:00</updated>
    <id>http://zyearn.github.io/blog/2014/01/28/think-after-learn</id>
    <content type="html"><![CDATA[<p>最近一直在思考一个问题，什么是真正的努力。</p>

<p>前几天看到一个事情，说印度学生的努力程度比起欧美学生要高很多。只要一有时间，印度学生就会抓紧时间学习，看书，不会浪费丝毫时间。然后每年的大公司实习申请中，印度学生的申请占了申请总数的大部分。结果是，像facebook，或google这样的大公司的实习生录取名单中，欧美学生占了绝大多数，只有很少的印度学生。这说明了什么问题？</p>

<!-- more -->


<h2>我所理解的努力</h2>

<p>之前一直很幼稚，当然现在也很幼稚，以为努力就是单纯的为了某一件事而罄尽自己的全力。努力可以分为两种：</p>

<p>第一种是这样的，上课会努力地记笔记，下课会努力地复习笔记，认为逃课是可耻的。看书的时候恨不得把整本书都刻到脑子里去，他们做什么事都很努力，他们一直在努力，所以很少思考，于是没有自己深刻的认识，一门课考试考完一段时间差不多就全忘了，但这并不影响他们努力学下一本书，继续努力把下一本书刻到脑子里。这些人的努力程度不亚于全宇宙任何一个星球上的人。</p>

<p>第二种是这样的，他们怕麻烦，怕重复劳动。有时他们会开发一些脚本来完成繁琐的工作，如果是一些大家都用得到的脚本会推到github上让大家一起修改，有时他们会参加一些开源的项目，对开源社区做出贡献。他们有自己的项目，并经常活跃在像stackoverflow这样的社区。他们有自己的博客，总结遇到的问题，定时更新。他们对计算机领域感到兴奋，他们想要做的是解决问题。</p>

<h2>思考</h2>

<p>上面两种人的差距在于努力后思考的时间和思考的深度。一部分原因要归结给教科书填鸭式的方式。计算机领域还算好，很多国外的教材还是讲得很循循善诱，但引发人去思考的佳作真的不算多。</p>

<p>就计算机本科学习来举例吧，我们都知道要带着问题来看书，真正能做到的都变成了牛人。</p>

<p>我自己思考得也不多，现在回想起来，觉得很多课程当时都思考得不够深入。</p>

<p>学算法，自己思考过Dijkstra算法和Prim算法的核心是没有区别的吗，思考过快排的非递归怎么写吗，思考过如果解决了NPC问题，那意味着什么吗，思考过学习算法的终极意义是什么呢。</p>

<p>学数据结构，自己写过B+树吗。</p>

<p>学数电，思考过怎么通过时序电路的寄存器和组合电路组成了CPU流水线的基本框架吗。</p>

<p>学C++，搜索过C++11的特性吗，不能说写了一个class，用上封装，继承，多态，就说会C++吧。</p>

<p>学计算机组成，深入思考过CPU流水线是怎么处理数据冒险和控制冒险的吗，分支预测失败了怎么处理，ret语句怎么处理，push的寄存器是esp的话怎么处理，自己模拟实现过流水线吗。</p>

<p>学体系结构，思考过几种主流的ISA的区别点在哪吗，思考过怎么根据硬件的限制优化代码达到加速的效果，思考过superscalar是怎么使IPC小于1的吗。</p>

<p>学计算机网络，思考过一个用户先从DHCP申请IP，再到发送一个HTTP包到互联网的全部过程吗。</p>

<p>&hellip;</p>

<p>其实这篇文章的目的是批评自己，希望自己以后多思考多总结。</p>

<h2>学而不思则罔</h2>

<p>以前学这句古语的时候，体会不到这句话里面的意思。</p>

<p>而现在经历了大学快4年，算是经历了些事情，发现古人真的是那么早就参透了世间深刻的道理。</p>

<p>学而不思则罔。</p>

<p>共勉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[想什么重要还是做什么重要]]></title>
    <link href="http://zyearn.github.io/blog/2013/09/04/thoughts-not-important/"/>
    <updated>2013-09-04T00:10:00+02:00</updated>
    <id>http://zyearn.github.io/blog/2013/09/04/thoughts-not-important</id>
    <content type="html"><![CDATA[<p>前几天看了篇文章，大概观点是</p>

<blockquote><p>你想什么不重要，重要的是你做什么。</p></blockquote>

<p>我不能完全同意这个观点，这个问题要分两方面看。</p>

<!-- more -->


<p>第一个方面，你对世界的贡献。上面那句话只能应用于这个方面，你对世界的贡献取决于你做了什么，而不是你的那些未行动的想法，从这个角度来讲，如果一个人从出生到死亡，一件事都不做，只在不断的思考，即使悟得了宇宙所有奥秘，那么只有他一个人知道，那么他对世界的贡献为零，人们不会记住这个人，也不知道这个人到底有多伟大。</p>

<p>第二个方面，关注自己的感受。你每日所思所想构成了每一天，每一天构成了人生。如果在思考的过程中，个人的内心世界达到了轻松愉悦或超脱状态，然后这样度过一生，我觉得也没有什么遗憾了。还是上面那个例子，一个人穷尽一生悟得了宇宙的奥秘，他的整个一生中都乐于做这件事，整个一生都非常快乐，即使没有任何发表，即使没有任何人知道，那又何妨呢，自己过得快乐不就可以了？所以从这个角度来说，做多少和想多少都无所谓，重要的是这个行为能使自己心灵得到富足，至于别人对自己的看法，可能并不重要吧。</p>

<p>总得来说，一个人过得开心最重要。如果你的开心的源泉是别人对你的崇敬和帮助别人的成就感，那你就多做吧，多想的确帮不了太多；但如果你的开心源泉是内心的富足或者思考后的豁然开朗，那就多思考多想吧，让那些该做的事情留给那些想做的人做吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你能理解的，我也能理解]]></title>
    <link href="http://zyearn.github.io/blog/2013/05/06/if-you-can-i-can/"/>
    <updated>2013-05-06T21:11:00+02:00</updated>
    <id>http://zyearn.github.io/blog/2013/05/06/if-you-can-i-can</id>
    <content type="html"><![CDATA[<p>很多时候觉得人的智商真的有高有低，即对一个特定问题的反应快慢。但智商高低和理解力是两码事，比如说我智商低，但我通过一定时间的练习，你所理解的东西我也一定能理解。</p>

<!-- more -->


<p>我把人脑的功能模块抽象为A，B，C，&hellip;以此类推。每个人拥有的功能模块不同，比如说你拥有A，B，C，而我只拥有A，B。所以当一个问题C的实例摆在我们面前时，你可以迅速调用模块C来解决这个问题，表现为反应快。而我没有功能模块C，于是这个问题一下子我解决不了，但是，我可以通过组装A和B来达到模块C的效果，表现为，一开始不懂，但经过一个学习的阶段，然后才弄懂了。</p>

<p>这里就有一个时间差，你一下子就懂了，我要经过一段时间才懂。但是最终，大家都理解了相同的东西。很多人因为一个问题难，认为自己不可能想出来，就不做了。他们只是不愿意去寻找那么一种组装方法，使脑中现有的模块能组成新的模块，来解决问题。</p>

<p>有些人生而聪明，他们脑中天生的模块多，理解得也就快，新的模块也越来越多，理解的越来越快，构成了一个良性循环。有些人可能天生模块不是那么多，于是可能觉得自己不够聪明，不去想一些复杂的问题，不去组装新的模块，构成了恶性循环。我把这些天生的模块叫做元块。</p>

<p>一个元块少的人，完全可以通过后天的努力生成更多新的模块。如果你用模块X来理解一个东西，那么我完全可以根据我现有的模块组装一个X来理解你所理解的东西。</p>

<p>所以，在我看来，这个世界上没有你不能懂的，只有你不愿懂的。有多少次，那些以前看起来牛逼哄哄的知识或概念，在真正掌握以后，感叹一声，也就那么回事？</p>

<!-- （上文纯属扯淡）-->

]]></content>
  </entry>
  
</feed>
